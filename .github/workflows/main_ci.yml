name: CI/CD Pipeline

on:
    push:
        branches:
            - develop
    pull_request:
        branches:
            - develop

jobs:
    build-and-test:
        runs-on: self-hosted

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub (for build cache)
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build Docker image (for testing)
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: false # 이미지를 푸시하지 않고 빌드만 합니다.
                  tags: ${{ secrets.DOCKER_IMAGE }}:test # 테스트용 태그
                  cache-from: type=registry,ref=${{ secrets.DOCKER_IMAGE }}:latest # 최신 이미지에서 캐시 가져오기
                  cache-to: type=inline # 빌드 캐시를 인라인으로 저장 (다음 빌드에 사용)

            - name: Run tests (if any)
              run: echo "No tests defined yet. Add your test commands here."
              # 예시: docker run --rm ${{ secrets.DOCKER_IMAGE }}:test pytest

    deploy:
        needs: build-and-test # build-and-test 잡이 성공해야 deploy 잡이 실행됩니다.
        runs-on: self-hosted
        # develop 브랜치에 푸시된 경우에만 실행
        if: github.ref == 'refs/heads/develop'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME }}
                  password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  push: true
                  tags: ${{ secrets.DOCKER_IMAGE }}:latest, ${{ secrets.DOCKER_IMAGE }}:${{ github.sha }} # latest와 커밋 SHA 태그 모두 푸시
                  cache-from: type=registry,ref=${{ secrets.DOCKER_IMAGE }}:latest # 최신 이미지에서 캐시 가져오기
                  cache-to: type=inline # 빌드 캐시를 인라인으로 저장

            - name: Set up SSH Agent
              uses: webfactory/ssh-agent@v0.9.0
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Deploy to server via Bastion
              env:
                  SSH_HOST: ${{ secrets.SSH_HOST }} # 베스천 호스트의 퍼블릭 IP
                  SSH_USERNAME: ${{ secrets.SSH_USERNAME }} # 베스천 호스트 사용자 이름
                  BACKEND_HOST: ${{ secrets.BACKEND_HOST }} # 백엔드 인스턴스의 프라이빗 IP
                  BACKEND_USERNAME: ${{ secrets.BACKEND_USERNAME }} # 백엔드 인스턴스 사용자 이름
                  REMOTE_APP_PATH: /home/ubuntu # 백엔드 인스턴스 내 프로젝트 경로
              run: |
                  set -x # 셸 디버깅 활성화

                  # 서버의 호스트 키를 known_hosts에 추가하여 SSH 접속 시 확인 과정을 건너뜁니다.
                  # StrictHostKeyChecking=yes를 유지하려면 이 단계가 필수적입니다.
                  mkdir -p ~/.ssh
                  ssh-keyscan -v -H "$SSH_HOST" >> ~/.ssh/known_hosts 2>&1
                  ssh-keyscan -v -H "$BACKEND_HOST" >> ~/.ssh/known_hosts 2>&1

                  # SSH ProxyCommand를 사용하여 베스천을 통해 백엔드 인스턴스에 접속합니다.
                  # 기존 컨테이너 중지 및 삭제 후 새 컨테이너 실행
                  ssh -v -o StrictHostKeyChecking=yes \ # StrictHostKeyChecking=yes로 변경
                      -o ProxyCommand="ssh -v -W %h:%p ${{ env.SSH_USERNAME }}@${{ env.SSH_HOST }} 2>&1" \
                      "${{ env.BACKEND_USERNAME }}@${{ env.BACKEND_HOST }}" \
                      "docker stop scratcha_server || true && docker rm scratcha_server || true && docker pull ${{ secrets.DOCKER_IMAGE }}:latest && docker run -d --name scratcha_server --env-file /home/${{ env.BACKEND_USERNAME }}/.env -p 8001:8001 ${{ secrets.DOCKER_IMAGE }}:latest" 2>&1
