# nginx/nginx.conf

# nginx가 실행할 워커 프로세스의 수, CPU 코어 수와 동일하게 설정
worker_processes auto; 

# nginx의 연결 처리 방식, 각 워커 프로세스가 동시에 처리할 수 있는 최대 연결 수, 기본값: 1024
events {    
    worker_connections 1024; 
}

# HTTP 서버의 전체 동작을 정의하는 블록
http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Gzip 압축 설정 (선택 사항)
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # HTTP로 들어오는 모든 요청을 HTTPS로 강제로 리디렉션 합니다.
    server {
        listen 80; # HTTP로 들어오는 연결을 수신합니다.
        server_name localhost; # 이 서버 블록이 응답할 도메인을 지정합니다. localhost: 개발환경, 프로덕션: 실제 도메인(example.com 등)

        # HTTP 요청을 HTTPS로 리디렉션
        return 301 https://$host$request_uri;
    }

    # HTTPS 요청을 처리하고 SSL/TLS 암호화를 설정하며, API 요청을 각 백엔드로 프록시하는 블록입니다.
    server {
        listen 443 ssl; # HTTPS로 들어오는 연결을 수신합니다. ssl 옵션으로 암호화를 활성화합니다.
        server_name localhost;

        # SSL 인증서 경로 설정
        ssl_certificate /etc/nginx/ssl/localhost.crt; # 개발 환경에서는 자체 서명 인증서를 사용합니다.
        ssl_certificate_key /etc/nginx/ssl/localhost.key; # 개발 환경에서는 자체 서명 인증서를 사용합니다.


        # SSL 프로토콜 및 암호화 스위트 설정 (보안 강화)
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers on;

        # 캡챠 API 라우팅. /api/captcha/로 시작하는 URL요청을 captcah api 서비스로 리버스 프록시합니다.
        # location /api/captcha/ { 
        #     # captcha-api는 docker-compose.yml에 정의된 서비스 이름이며, Docker 내부 네트워크에서 자동으로 IP로 해석됩니다. 
        #     # 8000은 captcha-api 컨테이너가 Uvicorn으로 실행되는 포트입니다.
        #     proxy_pass http://captcha-api:8000; 
        #
        #     # 프록시된 요청에 추가할 HTTP 헤더를 설정합니다. 이는 백엔드 서버가 원래 클라이언트의 정보를 받을 수 있도록 합니다.
        #     proxy_set_header Host $host;
        #
        #     # 실제 클라이언트의 IP 주소를 전달합니다.
        #     proxy_set_header X-Real-IP $remote_addr;
        #     
        #     # 클라이언트의 IP와 프록시 서버들의 IP 목록을 전달합니다.
        #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #
        #     # 원래 요청이 HTTP였는지 HTTPS였는지 프로토콜 정보를 전달합니다.
        #     proxy_set_header X-Forwarded-Proto $scheme;
        #
        #     # 백엔드 서버에서 리디렉션 응답을 보낼 때, Nginx가 Location 헤더를 수정하지 않도록 합니다.
        #     proxy_redirect off;
        #
        #     # 개발 환경에서만 *를 사용하고, 프로덕션에서는 반드시 허용할 특정 도메인으로 제한해야 합니다. (예: 'https://your-frontend-domain.com')
        #     add_header 'Access-Control-Allow-Origin' '*' always;
        #     add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        #     add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
        #     add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
        #     
        #     # CORS Preflight 요청을 처리하기 위한 블록입니다. 
        #     # 이 블록은 특정 종류의 HTTP 요청(예: POST 요청에 사용자 정의 헤더 포함)을 보내기 전에 브라우저는 서버에게 해당 요청을 보낼 수 있는지 미리 물어보는 OPTIONS 요청을 보냅니다. 
        #     # Nginx는 이 OPTIONS 요청에 대한 응답을 직접 처리하고, 204 No Content 상태 코드와 함께 필요한 CORS 헤더를 보냅니다.
        #     if ($request_method = 'OPTIONS') {
        #         add_header 'Access-Control-Max-Age' 1728000;
        #         add_header 'Content-Type' 'text/plain charset=utf-8';
        #         add_header 'Content-Length' 0;
        #         return 204;
        #     }
        # }

        # 대시보드 API 라우팅. /api/dashboard/로 시작하는 URL요청을 dashboard api 서비스로 리버스 프록시합니다.
        location /api/dashboard/ {
            proxy_pass http://dashboard-api:8001;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_redirect off;
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }
    }
}