# docker-compose.yml

services:
    # 캡챠 API 서비스
    captcha-api:
        build:
            context: ./captcha-api
            dockerfile: Dockerfile
        container_name: ScratCHA_captcha_api
        env_file:
            - ./.env
        ports:
            - "8000:8000" # Nginx를 통해 접근되므로 외부 노출은 선택 사항 (개발 편의상 유지)
        volumes:
            - ./captcha-api/app:/app # 로컬 코드를 컨테이너에 마운트 (개발 중 코드 변경 시 자동 반영)
        depends_on:
            db:
                condition: service_healthy
        command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

    # 대시보드 API 서비스
    dashboard-api:
        build:
            context: ./dashboard-api
            dockerfile: Dockerfile
        container_name: ScratCHA_dashboard_api
        env_file:
            - ./.env
        ports:
            - "8001:8001" # Nginx를 통해 접근되므로 외부 노출은 선택 사항 (개발 편의상 유지)
        volumes:
            - ./dashboard-api/app:/app # 로컬 코드를 컨테이너에 마운트
        depends_on:
            db:
                condition: service_healthy
        command: uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload

    # MySQL 데이터베이스 서비스
    db:
        image: mysql:8.0
        container_name: ScratCHA_db
        env_file:
            - ./.env
        ports:
            - "3306:3306"
        volumes:
            - db_data:/var/lib/mysql
        healthcheck:
            test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u$$MYSQL_USER", "-p$$MYSQL_PASSWORD"]
            timeout: 20s
            retries: 10
            interval: 3s
            start_period: 30s

    # Nginx 리버스 프록시 서비스
    nginx:
        image: nginx:latest
        container_name: ScratCHA_nginx_proxy
        ports:
            - "80:80" # 웹 트래픽을 Nginx로 포워딩
            - "443:443" # HTTPS를 사용
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro # Nginx 설정 파일 마운트
            - ./nginx/ssl:/etc/nginx/ssl:ro # HTTPS 사용 시 SSL 인증서 마운트
            # - ./captcha-sdk/dist:/usr/share/nginx/html/sdk # 빌드된 SDK 파일을 Nginx가 서빙
            # - ./client-example:/usr/share/nginx/html/client # 예제 클라이언트 웹사이트 서빙
        depends_on:
            captcha-api:
                condition: service_started # API 서버가 시작된 후 Nginx 시작
            dashboard-api:
                condition: service_started

# Docker 볼륨 정의
volumes:
    db_data:
