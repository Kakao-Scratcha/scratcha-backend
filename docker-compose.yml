services:
    # 캡챠 API 서비스
    captcha-api:
        build:
            context: ./captcha_api # 로컬의 ./captcha_api 디렉토리 (여기서 Dockerfile 찾음)
            dockerfile: Dockerfile
        container_name: scratcha_captcha_api
        env_file:
            - ./.env
        ports:
            - "8000:8000"
        volumes:
            - .:/app # 프로젝트 루트 디렉토리 전체를 컨테이너의 /app으로 마운트
        depends_on:
            db:
                condition: service_healthy
        command: ["uvicorn", "captcha_api.app.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

    # 대시보드 API 서비스
    dashboard-api:
        build:
            context: .
            dockerfile: ./dashboard_api/Dockerfile
        container_name: scratcha_dashboard_api
        env_file:
            - ./.env
        ports:
            - "8001:8001"
        volumes:
            - .:/app # 프로젝트 루트 디렉토리 전체를 컨테이너의 /app으로 마운트
        depends_on:
            db:
                condition: service_healthy
        command: ["uvicorn", "dashboard_api.app.main:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]

    # MySQL 데이터베이스 서비스
    db:
        image: mysql:8.0
        container_name: scratcha_db
        env_file:
            - ./.env
        ports:
            - "3306:3306"
        volumes:
            - db_data:/var/lib/mysql
            - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
        command: --default-time-zone=+00:00 # 이 줄을 추가합니다.
        healthcheck:
            test: ["CMD-SHELL", "mysqladmin ping -h localhost -u$$MYSQL_USER -p$$MYSQL_PASSWORD"]
            timeout: 20s
            retries: 10
            interval: 3s
            start_period: 30s

    # Nginx 리버스 프록시 서비스
    nginx:
        image: nginx:latest
        container_name: scratcha_nginx_proxy
        ports:
            - "80:80"
            - "443:443"
        volumes:
            - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./nginx/ssl:/etc/nginx/ssl:ro
        depends_on:
            captcha-api:
                condition: service_started
            dashboard-api:
                condition: service_started
        command: >
            sh -c "sleep 5 && nginx -g 'daemon off;'"

# Docker 볼륨 정의
volumes:
    db_data: